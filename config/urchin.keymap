// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Home row mods macro
#define HRML(k1,k2,k3,k4) &ht LCTRL k1 &ht LSHFT k2  &ht LALT  k3 &ht LGUI  k4
#define HRMR(k1,k2,k3) &ht RGUID k1 &ht RALT  k2  &ht RSHFT k3

#define WIN 0
#define SYM 1
#define NAV 2
#define MSC 3
#define GAM 4

/ {
    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };
        sm: shift_modified {
            label = "shift_modified";
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        smm: shift_modified_mod {
            label = "shift_modified_mod";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <0>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp RCTRL>, <&sm LPAR UNDER>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <SYM NAV>;
            then-layer = <MSC>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
              &kp    Q    &kp    W    &kp    E    &kp    R    &kp    T        &kp    Y    &kp    U    &kp    I    &kp    O    &kp    P
            HRML(    A     ,     S     ,     D     ,     F )  &kp    G        &kp    H   HRMR(   J     ,     K     ,     L     )    &smm
              &kp    Z    &kp    X    &kp    C    &kp    V    &kp    B        &kp    N    &kp    M &sm KP_COMMA APOS &sm KP_DOT COLON &sm RET KP_SLASH
                                                  &lt NAV TAB &kp   BSPC      &kp  SPACE  &lt SYM RET
            >;
        };

        symbol_number_layer {
            bindings = <
              &kp  AMPS   &kp  PIPE   &kp  RBKT   &sm   RBRC  &kp  DOLLAR     &kp  PLUS   &kp    N7   &kp    N8   &kp    N9   &sm KP_MULTIPLY CARET
              &sm DQT GRAVE &kp  LSHFT &kp  LBKT  &kp   LBRC  &sm  LT GT     &kp KP_EQUAL TILDE &kp N4 &kp   N5   &kp   N6   &sm KP_N0 RPAR
              &kp    AT   &kp   HASH  &kp  EXCL   &kp  QMARK  &kp  BSLH       &kp MINUS &kp N1 &sm KP_N2 KP_COMMA &kp KP_N3 KP_DOT &sm KP_SLASH AMPS
                                                       &trans      &trans          &trans      &trans
            >;
        };

        navigation_layer {
            bindings = <
              &kp   ESC   &kp   DEL   &kp   CAPS  &kp  PSCRN  &kp INSERT          &trans      &trans      &trans      &trans      &trans
              &kp  LCTRL  &kp  LSHIFT &kp   TAB   %kp  LGUI       &trans          &trans  &kp   LEFT  &kp   DOWN  %kp    UP   %kp   RIGHT
                  &trans      &trans      &trans      &trans      &trans          &trans      &trans      &trans      &trans  %kp   RET
                                                      &trans      &trans           &trans     &trans
            >;
        };

        miscelanous_layer {
            bindings = <
              &kp   F1    &kp   F2    &kp   F3    &kp    F4   &bt BT_SEL 1    &bt BT_SEL 2 &out OUT_TOG   &trans      &trans      &trans
              &kp   F5    &kp   F6    &kp   F7    &kp    F8   &bt BT_SEL 0    &bt BT_SEL 3    &trans      &trans      &trans      &trans
              &kp   F9    &kp   F10   &kp   F11   &kp    F12  &bt BT_CLR      &bt BT_SEL 4    &trans      &trans      &trans  &tog  GAM
                                                      &trans      &trans           &trans     &trans
            >;
        };

        gaming_layer {
            bindings = <
                  &trans      &trans      &trans      &trans      &trans          &trans      &trans      &trans      &trans      &trans
                  &trans      &trans      &trans      &trans      &trans          &trans      &trans      &trans      &trans      &trans
                  &trans      &trans      &trans      &trans      &trans          &trans      &trans      &trans      &trans  &tog GAM
                                                      &trans      &trans          &trans      &trans
            >;
        };
    };
};